{"version":3,"sources":["Components/Header/Header.js","Components/LinkConverter/LinkConverter.js","Components/App/App.js","theme/theme.js","serviceWorker.js","index.js"],"names":["Header","className","Link","color","href","target","rel","IconButton","aria-label","fontSize","ghPagesRegex","ghLinkRegex","ghPagesGroupedRegex","ghRepoGroupedRegex","LinkConverter","props","inputValidation","inputURL","console","log","test","handleChange","event","value","setState","trim","allowConvert","convertURL","state","slice","match","username","folders","newURL","convertedURL","openLink","appTitle","this","Typography","variant","component","gutterBottom","Container","maxWidth","Box","my","Paper","Grid","container","spacing","item","xs","TextField","id","label","autoFocus","fullWidth","onChange","disabled","Button","onClick","React","Component","App","theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","overrides","MuiPaper","root","padding","marginBottom","backgroundColor","MuiButton","margin","Boolean","window","location","hostname","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbb88cf0.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\nimport IconButton from '@material-ui/core/IconButton';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport Link from '@material-ui/core/Link';\n\nfunction Header() {\n  return (\n    <div className=\"Header\">\n      <Link\n        color=\"inherit\"\n        href=\"https://github.com/martink-rsa/github-link-converter\"\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        <IconButton color=\"primary\" aria-label=\"add to shopping cart\">\n          <GitHubIcon fontSize=\"large\" />\n        </IconButton>\n      </Link>\n    </div>\n  );\n}\n\nexport default Header;\n","/* eslint-disable no-useless-escape */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\n// eslint-disable-next-line object-curly-newline\nimport { Paper, TextField, Button, Grid, Link } from '@material-ui/core';\n\n/*\nTEST STRINGS:\nmartink-rsa.github.io\nmartink-rsa.github.io/\nmartink-rsa.github.io/ToDoList\nmartink-rsa.github.io/ToDoList/page\nhttp://martink-rsa.github.io/ToDoList\nhttps://martink-rsa.github.io/ToDoList\n\ngithub.com\ngithub.com/\ngithub.com/martink-rsa\ngithub.com/martink-rsa/\ngithub.com/martink-rsa/\ngithub.com/martink-rsa/ToDoList\ngithub.com/martink-rsa/ToDoList/page/\nhttp://github.com/martink-rsa/ToDoList\nhttps://github.com/martink-rsa/ToDoList\nhttps://www.github.com/martink-rsa/ToDoList\nhttps://www.github.com/martink-rsa/ToDoList/page\n*/\n\nconst ghPagesRegex = /github\\.io/;\nconst ghLinkRegex = /github\\.com/;\nconst ghPagesGroupedRegex = /^(https?\\:\\/\\/)?([a-zA-Z0-9\\-]*)(\\.github\\.io\\/)([a-zA-Z0-9\\-\\_\\/]+)/;\nconst ghRepoGroupedRegex = /^(https?\\:\\/\\/)?(w{3}\\.)?(github\\.com\\/)([a-zA-Z0-9\\-]*)\\/([a-zA-Z0-9\\-\\_\\/]+)/;\n\nclass LinkConverter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputURL: '', // Set to empty for default\n      convertedURL: '',\n      allowConvert: false, // Set to false for default\n    };\n  }\n\n  inputValidation = (inputURL) => {\n    console.log(inputURL);\n    console.log(ghPagesGroupedRegex.test(inputURL));\n    // eslint-disable-next-line implicit-arrow-linebreak\n    return (\n      ghPagesGroupedRegex.test(inputURL) || ghRepoGroupedRegex.test(inputURL)\n    );\n  };\n\n  handleChange = (event) => {\n    const {\n      target: { value: inputURL },\n    } = event;\n    this.setState(() => ({\n      inputURL: inputURL.trim(),\n      allowConvert: this.inputValidation(inputURL.trim()),\n    }));\n  };\n\n  convertURL = () => {\n    let { inputURL } = this.state;\n    inputURL = inputURL.slice(0);\n    if (inputURL.match(ghPagesRegex)) {\n      const username = inputURL.match(ghPagesGroupedRegex)[2];\n      const folders = inputURL.match(ghPagesGroupedRegex)[4];\n      const newURL = `https://www.github.com/${username}/${folders}`;\n      this.setState({ convertedURL: newURL });\n    } else if (inputURL.match(ghLinkRegex)) {\n      const username = inputURL.match(ghRepoGroupedRegex)[4];\n      const folders = inputURL.match(ghRepoGroupedRegex)[5];\n      const newURL = `https://${username}.github.io/${folders}`;\n      this.setState({ convertedURL: newURL });\n    }\n  };\n\n  openLink = () => {\n    this.convertURL();\n  };\n\n  render() {\n    const { appTitle } = this.props;\n    const { inputURL, convertedURL, allowConvert } = this.state;\n    return (\n      <div>\n        <Typography color=\"primary\" variant=\"h4\" component=\"h1\" gutterBottom>\n          {appTitle}\n        </Typography>\n        <Typography color=\"primary\" component=\"p\">\n          Convert between GitHub Pages and GitHub Repository links.\n        </Typography>\n        <Container maxWidth=\"sm\">\n          <Box my={4}>\n            <Paper>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    id=\"url-input\"\n                    label=\"Enter URL\"\n                    variant=\"outlined\"\n                    autoFocus\n                    fullWidth\n                    value={inputURL}\n                    onChange={this.handleChange}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    id=\"url-result\"\n                    label=\"Result\"\n                    variant=\"outlined\"\n                    fullWidth\n                    disabled={!allowConvert}\n                    value={convertedURL}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={this.convertURL}\n                    disabled={!allowConvert}\n                  >\n                    Convert URL\n                  </Button>\n                  {allowConvert ? (\n                    <Link href={convertedURL} target=\"_blank\" rel=\"noopener\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={!allowConvert}\n                        onClick={this.openLink}\n                      >\n                        Convert &amp; Go\n                      </Button>\n                    </Link>\n                  ) : (\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={!allowConvert}\n                      onClick={this.openLink}\n                    >\n                      Convert &amp; Go\n                    </Button>\n                  )}\n                </Grid>\n              </Grid>\n            </Paper>\n          </Box>\n        </Container>\n      </div>\n    );\n  }\n}\n\nLinkConverter.propTypes = {\n  appTitle: PropTypes.string.isRequired,\n};\n\nexport default LinkConverter;\n","import React from 'react';\nimport './App.css';\nimport Header from '../Header/Header';\nimport LinkConverter from '../LinkConverter/LinkConverter';\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <LinkConverter appTitle=\"GitHub Link Converter\" />\n  </div>\n);\n\nexport default App;\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#61dafb',\n    },\n    secondary: {\n      main: '#b5ecfb',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#282c34',\n    },\n  },\n  overrides: {\n    MuiPaper: {\n      root: {\n        padding: '20px 10px',\n        marginBottom: '10px',\n        backgroundColor: '#fff', // 5d737e\n      },\n    },\n    MuiButton: {\n      root: {\n        margin: '5px',\n      },\n    },\n  },\n});\n\nexport default theme;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './Components/App/App';\nimport theme from './theme/theme';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}